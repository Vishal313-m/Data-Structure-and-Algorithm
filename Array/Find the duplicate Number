 ----> BRUTE FORCE <---
 TC-- O(n) SC --O(n)
 class Solution {
public:
    int findDuplicate(vector<int>& nums) {
        int n = nums.size();
        unordered_map<int, int> mp;
        
        for(int i = 0; i < n; i++){
            mp[nums[i]]++;
            
            if(mp[nums[i]] > 1){
                return nums[i];
            }
        }
        return 0;
    }
};
 
------> BETTER APPROACH <----
  TC-- O(nlogn)  SC -- O(1)
  class Solution {
    
public:
int findDuplicate(vector<int>& nums) {
        // sort the numbers and find the number which has duplicate
        // by checking the one which has the same at next position
        sort(nums.begin(), nums.end());
        
        int duplicate = 0;
        for(int i = 0; i < nums.size() - 1; i++)
            if(nums[i] == nums[i+1]) {
                duplicate = nums[i];
                break;
            }
        return duplicate;
    }
};

---->OPTIMAL APPROACH   <-----

TC-- O(N) SC -- O(1)
class Solution {
public:
    int findDuplicate(vector<int>& nums) {
        int slow = nums[0];
        int fast = nums[0];
        
        do{
            slow = nums[slow];
            fast = nums[nums[fast]];
        }while(slow != fast);
        
        fast = nums[0];
        
        while(slow != fast){
            slow = nums[slow];
            fast = nums[fast];
        }
        
        return slow;
    }
};


