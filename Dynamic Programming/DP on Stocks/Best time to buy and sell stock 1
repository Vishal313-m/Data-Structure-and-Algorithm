
// Brute Force Solution

class Solution {
public:
    int maxProfit(vector<int>& prices) { 
    // Brute Force Solution Time O(N^2) & Auxiliary Space O(1)
    int len=prices.size(),profit=0;
        for(int i=0;i<len;i++){
            for(int j=i+1;j<len;j++){
                if(prices[j]>prices[i]){
                    int pro=prices[j]-prices[i];
                    profit=max(profit,pro);
                }
            }
        }
    return profit; 
  }
};


// EFFICIENT


class Solution {
public:
    int maxProfit(vector<int>& prices) {
         int min_price=INT_MAX;
        int profit=0;
        for(int i=0;i<prices.size();i++){
             min_price=min(prices[i],min_price);
            profit= max(profit,prices[i]-min_price);
        }
        return profit;
    }
};      // profit =7-7=0      //profit 1-1=0             // profit=5-1=4     //profit=3-1=2
        // min_price=7          // min_price=1           // min_price is not change
                                                         // profit   6-1=5  --ans




